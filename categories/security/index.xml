<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on P1n93r - 博学而精一</title>
    <link>https://p1n93r.github.io/categories/security/</link>
    <description>Recent content in security on P1n93r - 博学而精一</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 19 Jul 2021 17:07:36 +0800</lastBuildDate><atom:link href="https://p1n93r.github.io/categories/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>unzip_slip漏洞</title>
      <link>https://p1n93r.github.io/post/security/unzip_slip/</link>
      <pubDate>Mon, 19 Jul 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/unzip_slip/</guid>
      <description>漏洞代码 如下图所示，存在一个上传压缩包的接口，会对上传的文件自动进行解压： @RequestMapping(&amp;quot;upload&amp;quot;) public ResponseVo&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; upload(MultipartFile file) throws IOException { // 先将上传的压缩文件进行保存 File target = new File(basePath + File.separator + IdUtil.simpleUUID() + &amp;quot;.zip&amp;quot;);</description>
    </item>
    
    <item>
      <title>Attack RMI</title>
      <link>https://p1n93r.github.io/post/security/attack_rmi/</link>
      <pubDate>Sun, 04 Jul 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/attack_rmi/</guid>
      <description>基本概念 RMI介绍 RMI（Remote Method Invocation）即远程方法调用。使用RMI可以在客户机上调用远程服务器上的对象。RMI是一种行</description>
    </item>
    
    <item>
      <title>Fastjson反序列化攻击</title>
      <link>https://p1n93r.github.io/post/security/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB/</link>
      <pubDate>Sun, 04 Jul 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB/</guid>
      <description>FastJson API介绍 FastJson的常见API如下所示： JSON.toJSONString(Object)：将对象序列化成JSON字符串； JSON</description>
    </item>
    
    <item>
      <title>JEP290机制学习</title>
      <link>https://p1n93r.github.io/post/security/jep290%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 04 Jul 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/jep290%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</guid>
      <description>介绍 官方介绍：https://openjdk.java.net/jeps/290 （1）什么是JEP？ JEP 即 JDK Enhancement Proposal （JDK增强提议），目前索引编</description>
    </item>
    
    <item>
      <title>Apache_Dubbo_CVE-2020-1948分析</title>
      <link>https://p1n93r.github.io/post/security/apache_dubbo_cve-2020-1948%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 02 Jul 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/apache_dubbo_cve-2020-1948%E5%88%86%E6%9E%90/</guid>
      <description>影响范围 Dubbor &amp;lt;= 2.7.7 为啥可以打到2.7.7而不是官方通告的2.7.6？回答如下： dubbo协议下的event事件 rome Gadget分析 首先给出Gadg</description>
    </item>
    
    <item>
      <title>Arthas学习</title>
      <link>https://p1n93r.github.io/post/security/arthas%D1%A7%CF%B0/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/arthas%D1%A7%CF%B0/</guid>
      <description>安装使用 （1）安装 1 2 curl -O https://arthas.aliyun.com/arthas-boot.jar java -jar arthas-boot.jar --telnet-port 9998 --http-port -1 （2）退出Arthas 直接运行 quit 或者 exit 命令。但是这不是退出 Arthas ，而是退出当前连接而已，下次还是可以继</description>
    </item>
    
    <item>
      <title>MySQL_JDBC反序列化</title>
      <link>https://p1n93r.github.io/post/security/mysql_jdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/mysql_jdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>Gadget Chain 如下图所示，关键点是：ResultSetImpl#getObject()： POC # 8.0.11版本测试通过，8.0.22版本测试不通过 jdbc:mysql://xx.xx.xx.xx:3306/test?autoDeserialize=true&amp;amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;amp;user=root&amp;amp;password=123456&amp;amp;serverTimezone=GMT # 6</description>
    </item>
    
    <item>
      <title>Ognl_SSTI总结</title>
      <link>https://p1n93r.github.io/post/security/ognl_ssti%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/ognl_ssti%E6%80%BB%E7%BB%93/</guid>
      <description>Ognl介绍 Ognl，即对象视图导航语言（Object Graphic Navigation Language）。 使用这种表达式语言可以通过某种表达式语法存取 java 对象的任意属性，</description>
    </item>
    
    <item>
      <title>Pebble安全研究</title>
      <link>https://p1n93r.github.io/post/security/pebble%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/pebble%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</guid>
      <description>简介 Pebble是一款Java 模板引擎，开发他的灵感来自于Twig。它具有很强的模板延续性和易于阅读的语法；出于安全性考虑，它内置自动转义功</description>
    </item>
    
    <item>
      <title>springboot_actuator漏洞分析</title>
      <link>https://p1n93r.github.io/post/security/springboot_actuator%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/springboot_actuator%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
      <description>简介 Spring-Actuator是Spring-boot对应用监控的集成模块,提供了我们对服务器进行监控的支持,使我们更直观的获取应用程序</description>
    </item>
    
    <item>
      <title>Struts2历史漏洞分析</title>
      <link>https://p1n93r.github.io/post/security/struts2%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/struts2%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
      <description>Struts2基本了解 Struts2的数据处理架构图下所示： 一个简单的说明如下： 客户端初始化一个指向servlet容器的请求。 请求经过一系列</description>
    </item>
    
    <item>
      <title>Thymeleaf安全研究</title>
      <link>https://p1n93r.github.io/post/security/thymeleaf%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/thymeleaf%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</guid>
      <description>简介 Thymeleaf 是一个类似Velocity、FreeMarker 的Java模板引擎，而且Spring Boot推荐使用Thymeleaf引擎。它支持 HTML 原</description>
    </item>
    
    <item>
      <title>字节码插桩技术在内存马中的应用</title>
      <link>https://p1n93r.github.io/post/security/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%86%85%E5%AD%98%E9%A9%AC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%86%85%E5%AD%98%E9%A9%AC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>认识JavaAgent 在jdk的rt.jar包中存在一个 java.lang.instrument 包。 java Instrumentation 指的是可以用独立于应用程序之外的代理（agent）程序来监测和协助运行在J</description>
    </item>
    
    <item>
      <title>vulnstack2笔记</title>
      <link>https://p1n93r.github.io/post/security/vulnstack2%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 15 Jun 2021 00:28:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/vulnstack2%E7%AC%94%E8%AE%B0/</guid>
      <description>主要知识点 绕杀毒软件； 使用TeamView绕过RDP登录限制； MS17-010； 还有本次打靶未体现的知识点，但是可以应用到本次靶场： MS14-068; 黄金票</description>
    </item>
    
    <item>
      <title>Tomcat之Valve内存马</title>
      <link>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bvalve%E5%86%85%E5%AD%98%E9%A9%AC/</link>
      <pubDate>Wed, 02 Jun 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bvalve%E5%86%85%E5%AD%98%E9%A9%AC/</guid>
      <description>前置知识 需要掌握《Tomcat架构原理》。 这一招是真的厉害，脑袋一拍，我咋没想到？直接在Pipeline-Valve内植入木马，简单粗暴，非</description>
    </item>
    
    <item>
      <title>Tomcat之Servlet内存马</title>
      <link>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bservlet%E5%86%85%E5%AD%98%E9%A9%AC/</link>
      <pubDate>Wed, 02 Jun 2021 09:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bservlet%E5%86%85%E5%AD%98%E9%A9%AC/</guid>
      <description>前置知识 Tomcat架构原理 Tomcat之Filter内存马 过程分析 前面文章中（Tomcat之Filter内存马），分析得到，我们可以通过S</description>
    </item>
    
    <item>
      <title>Tomcat之Filter内存马</title>
      <link>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bfilter%E5%86%85%E5%AD%98%E9%A9%AC/</link>
      <pubDate>Tue, 01 Jun 2021 09:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bfilter%E5%86%85%E5%AD%98%E9%A9%AC/</guid>
      <description>前置知识 阅读本篇文章前需要掌握《Tomcat架构原理》。 分析 根据《Tomcat架构原理》中提到：Wrapper容器的最后一个Valve会创建</description>
    </item>
    
    <item>
      <title>vulnstack1笔记</title>
      <link>https://p1n93r.github.io/post/security/vulnstack1%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 26 May 2021 00:28:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/vulnstack1%E7%AC%94%E8%AE%B0/</guid>
      <description>网络环境 模拟黑盒环境，所以只知道内网win7的公网ip，拓扑图如下图所示： 边界打点 首先需要拿下对外开放服务的win7，已知其公网ip为192</description>
    </item>
    
    <item>
      <title>域控权限持久化</title>
      <link>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Mon, 24 May 2021 17:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>DSRM域后门 DSRM（Directory Service Restore Model，目录服务恢复模式）是windows域环境中域控的安全模式启动选项。每个域控都有一个</description>
    </item>
    
    <item>
      <title>第六章：域控制器安全</title>
      <link>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sun, 23 May 2021 09:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%89%E5%85%A8/</guid>
      <description>利用ntds.dit读取域内哈希 提取ntds.dit 主要分为以下几种方式提取： 在域控上使用ntdsutil的IFM提取，支持win2k03、</description>
    </item>
    
    <item>
      <title>第五章：域内横向移动分析及防御</title>
      <link>https://p1n93r.github.io/post/security/%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</link>
      <pubDate>Sat, 22 May 2021 12:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</guid>
      <description>IPC IPC的利用条件如下所示： 开启了139和445端口：IPC$需要139和445端口的支持。 管理员开启了默认共享：通过IPC$，可以实现对这</description>
    </item>
    
    <item>
      <title>JFinal Enjoy Template Engine命令执行绕过分析</title>
      <link>https://p1n93r.github.io/post/code_audit/jfinal_enjoy_template_engine%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 07 Mar 2021 22:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/code_audit/jfinal_enjoy_template_engine%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/</guid>
      <description>分析 上周代码审计一个系统，发现系统是基于JFinal框架，是一个国产比较出名的框架（还挺好用），JFinal默认不支持直接访问jsp，系统使</description>
    </item>
    
    <item>
      <title>第四章：权限提升分析及防御</title>
      <link>https://p1n93r.github.io/post/security/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</link>
      <pubDate>Sun, 07 Mar 2021 22:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</guid>
      <description>前言 在windows中，权限大概分为如下四种： User：普通用户权限，系统中最安全的权限。（分配给该组的默认权限不允许成员修改操作系统的设置</description>
    </item>
    
    <item>
      <title>第三章：隐藏通信隧道技术</title>
      <link>https://p1n93r.github.io/post/security/%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sun, 07 Feb 2021 22:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</guid>
      <description>基础知识 概述 下面所说的隧道，就是一种绕过端口屏蔽的通信方式，其实也就是使用不同协议的通信，以达到绕过防火墙的目的。常见的隧道如下： 网络层：I</description>
    </item>
    
    <item>
      <title>第二章：内网信息收集</title>
      <link>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sat, 23 Jan 2021 16:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</guid>
      <description>概述 当进入内网后，面对的是一片黑暗森林。我们需要对当前网络环境进行判断，涉及如下几个方面： 我是谁：对当前机器角色的判断。 这是哪：对当前机器所</description>
    </item>
    
    <item>
      <title>第一章：内网渗透基础</title>
      <link>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 19 Jan 2021 22:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</guid>
      <description>工作组 将不同的计算机按功能或部门分别列入不同的 工作组 ，以方便管理。 默认所有计算机都处在名为 WORKGROUP 的工作组中。 工作组资源管理模式适合于网络中计算机</description>
    </item>
    
    <item>
      <title>XXE利用</title>
      <link>https://p1n93r.github.io/post/security/xxe%E5%88%A9%E7%94%A8/</link>
      <pubDate>Sun, 17 Jan 2021 12:28:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/xxe%E5%88%A9%E7%94%A8/</guid>
      <description>有回显XXE 引用外部实体 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ELEMENT foo ANY &amp;gt; &amp;lt;!ENTITY s1 SYSTEM &amp;quot;file:///etc/passwd&amp;quot; &amp;gt; ]&amp;gt; &amp;lt;foo&amp;gt;&amp;amp;s1;&amp;lt;/foo&amp;gt; 引用公共实体 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt; &amp;lt;!DOCTYPE root PUBLIC &amp;quot;test&amp;quot; &amp;quot;file:///etc/passwd&amp;quot;&amp;gt; &amp;lt;root&amp;gt;&amp;amp;test;&amp;lt;/root&amp;gt; 引用参数实体 当文件含有特殊符号的时候，如&amp;amp</description>
    </item>
    
    <item>
      <title>渗透笔记</title>
      <link>https://p1n93r.github.io/post/security/%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 01 Jan 2021 21:28:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</guid>
      <description>获取shell后 开启清屏： export TERM=screen # 赋值xterm也可以 查看sudo权限： sudo -l 尝试生成公钥文件到用户目录下的 .ssh 下： echo &amp;quot;xxxx&amp;quot; &amp;gt; /home/p1n93r/.ssh/authorized_keys ，然后就可以免密ssh</description>
    </item>
    
    <item>
      <title>sqli_labs通关</title>
      <link>https://p1n93r.github.io/post/security/sqli-labs%E9%80%9A%E5%85%B3/</link>
      <pubDate>Sat, 28 Nov 2020 20:04:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/sqli-labs%E9%80%9A%E5%85%B3/</guid>
      <description>前置知识 常用函数 version()：mysql版本； user()：当前数据库链接用户名； database()：当前链接数据库名； @@data</description>
    </item>
    
    <item>
      <title>upload_labs通关</title>
      <link>https://p1n93r.github.io/post/security/upload_labs%E9%80%9A%E5%85%B3/</link>
      <pubDate>Sun, 08 Nov 2020 13:04:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/upload_labs%E9%80%9A%E5%85%B3/</guid>
      <description>第一关 源码 function checkFile() { var file = document.getElementsByName(&#39;upload_file&#39;)[0].value; if (file == null || file == &amp;quot;&amp;quot;) { alert(&amp;quot;请选择要上传的文件!&amp;quot;); return false; } //定义允许上传的文件类型 var allow_ext =</description>
    </item>
    
    <item>
      <title>低于1.5.0版本shiro身份绕过漏洞分析</title>
      <link>https://p1n93r.github.io/post/security/%E4%BD%8E%E4%BA%8E1.5.0%E7%89%88%E6%9C%ACshiro%E8%BA%AB%E4%BB%BD%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 06 Nov 2020 18:35:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/%E4%BD%8E%E4%BA%8E1.5.0%E7%89%88%E6%9C%ACshiro%E8%BA%AB%E4%BB%BD%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
      <description>测试环境 shiro 1.4.0 springboot shiro过滤器配置如下： @Bean public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier(&amp;quot;defaultWebSecurityManager&amp;quot;) DefaultWebSecurityManager defaultWebSecurityManager) { ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean(); //设置安全管理器 shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager); //设置未认证(登录)时，访问需要认证的资源时跳转的页面</description>
    </item>
    
    <item>
      <title>CewlKid: 1</title>
      <link>https://p1n93r.github.io/post/security/cewlkid/</link>
      <pubDate>Wed, 23 Sep 2020 19:51:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/security/cewlkid/</guid>
      <description>介绍 An intermediate boot2root. The name is a hint. The start is CTF but the end is real world and worth the effort. Created in Virtualbox. Goal: Get the root flag. 地址：CewlKid: 1 virtualbox网络设置 首先需要保证攻击机和靶子</description>
    </item>
    
  </channel>
</rss>
