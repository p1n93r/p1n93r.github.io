<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code_audit on P1n93r - 博学而精一</title>
    <link>https://p1n93r.github.io/categories/code_audit/</link>
    <description>Recent content in code_audit on P1n93r - 博学而精一</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Oct 2021 22:28:36 +0800</lastBuildDate><atom:link href="https://p1n93r.github.io/categories/code_audit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHP代码审计学习笔记</title>
      <link>https://p1n93r.github.io/post/code_audit/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 18 Oct 2021 22:28:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/code_audit/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>PHP的脆弱点汇总 in_array() 这个函数常用于文件上传中的白名单检测，但是这个函数有一个可选的参数(第三个参数)，如果这个参数没有使用 true 的话，那么在进行</description>
    </item>
    
    <item>
      <title>Shiro550反序列化分析</title>
      <link>https://p1n93r.github.io/post/code_audit/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 14 Mar 2021 22:07:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/code_audit/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</guid>
      <description>攻击链分析 debug得到整个攻击链的主要路径如下图所示： 代码分析主要从 AbstracRememberMeManager#getRemembe</description>
    </item>
    
    <item>
      <title>Java安全</title>
      <link>https://p1n93r.github.io/post/code_audit/java%E5%AE%89%E5%85%A8/</link>
      <pubDate>Tue, 02 Feb 2021 17:52:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/code_audit/java%E5%AE%89%E5%85%A8/</guid>
      <description>Java反射 Java安全中最火的不过反序列化漏洞，而反序列化漏洞离不开反射。通过反射可以为Java附加上动态特性。 Java中获取java.l</description>
    </item>
    
    <item>
      <title>代码审计思路</title>
      <link>https://p1n93r.github.io/post/code_audit/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Sat, 16 Jan 2021 12:28:36 +0800</pubDate>
      
      <guid>https://p1n93r.github.io/post/code_audit/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%9D%E8%B7%AF/</guid>
      <description>审计方式 以下描述均基于人工审计（Java代码审计） 底层逆向跟踪：从底层根据敏感函数、敏感关键字回溯到最外层的参数入口，如果整个调用链没有防护</description>
    </item>
    
  </channel>
</rss>
