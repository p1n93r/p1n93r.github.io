<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on P1n93r - 博学而精一</title><link>https://p1n93r.github.io/post/</link><description>Recent content in Posts on P1n93r - 博学而精一</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 29 Apr 2022 19:10:48 +0800</lastBuildDate><atom:link href="https://p1n93r.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Souffle学习笔记</title><link>https://p1n93r.github.io/post/security/souffle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 29 Apr 2022 19:10:48 +0800</pubDate><guid>https://p1n93r.github.io/post/security/souffle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>背景 最近在研究自动化代码审计相关的东西，搜集资料时看到了南京大学的《静态软件分析》课程，理论加落地实践都有，甚至那个李老师自己还做了落地项目</description></item><item><title>重新启程</title><link>https://p1n93r.github.io/post/other/%E9%87%8D%E6%96%B0%E5%90%AF%E7%A8%8B/</link><pubDate>Fri, 22 Apr 2022 23:10:28 +0800</pubDate><guid>https://p1n93r.github.io/post/other/%E9%87%8D%E6%96%B0%E5%90%AF%E7%A8%8B/</guid><description>一些碎碎念 博客大约停更一年了，甚至关停了半年；看着自己未写完的代码、未看完的书，心中感慨万千。这一年里，感觉自己的成长并不是很大，甚至之前学</description></item><item><title>PHP代码审计学习笔记</title><link>https://p1n93r.github.io/post/code_audit/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 18 Oct 2021 22:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/code_audit/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>PHP的脆弱点汇总 in_array() 这个函数常用于文件上传中的白名单检测，但是这个函数有一个可选的参数(第三个参数)，如果这个参数没有使用 true 的话，那么在进行</description></item><item><title>IDEA配置PHP调试环境</title><link>https://p1n93r.github.io/post/other/idea%E9%85%8D%E7%BD%AEphp%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 07 Oct 2021 17:05:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/idea%E9%85%8D%E7%BD%AEphp%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>我使用的是IDEA来进行调试php，需要开启两个插件，一个是： PHP Built-in Web Server ，还有一个是： PHP Web Page 。 其中 PHP Built-in Web Server 用于启动一个PHP Server，而 PHP</description></item><item><title>unzip_slip漏洞</title><link>https://p1n93r.github.io/post/security/unzip_slip/</link><pubDate>Mon, 19 Jul 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/unzip_slip/</guid><description>漏洞代码 如下图所示，存在一个上传压缩包的接口，会对上传的文件自动进行解压： @RequestMapping(&amp;quot;upload&amp;quot;) public ResponseVo&amp;lt;Map&amp;lt;String,Object&amp;gt;&amp;gt; upload(MultipartFile file) throws IOException { // 先将上传的压缩文件进行保存 File target = new File(basePath + File.separator + IdUtil.simpleUUID() + &amp;quot;.zip&amp;quot;);</description></item><item><title>Attack RMI</title><link>https://p1n93r.github.io/post/security/attack_rmi/</link><pubDate>Sun, 04 Jul 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/attack_rmi/</guid><description>基本概念 RMI介绍 RMI（Remote Method Invocation）即远程方法调用。使用RMI可以在客户机上调用远程服务器上的对象。RMI是一种行</description></item><item><title>Fastjson反序列化攻击</title><link>https://p1n93r.github.io/post/security/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB/</link><pubDate>Sun, 04 Jul 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB/</guid><description>FastJson API介绍 FastJson的常见API如下所示： JSON.toJSONString(Object)：将对象序列化成JSON字符串； JSON</description></item><item><title>JEP290机制学习</title><link>https://p1n93r.github.io/post/security/jep290%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</link><pubDate>Sun, 04 Jul 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/jep290%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</guid><description>介绍 官方介绍：https://openjdk.java.net/jeps/290 （1）什么是JEP？ JEP 即 JDK Enhancement Proposal （JDK增强提议），目前索引编</description></item><item><title>Apache_Dubbo_CVE-2020-1948分析</title><link>https://p1n93r.github.io/post/security/apache_dubbo_cve-2020-1948%E5%88%86%E6%9E%90/</link><pubDate>Fri, 02 Jul 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/apache_dubbo_cve-2020-1948%E5%88%86%E6%9E%90/</guid><description>影响范围 Dubbor &amp;lt;= 2.7.7 为啥可以打到2.7.7而不是官方通告的2.7.6？回答如下： dubbo协议下的event事件 rome Gadget分析 首先给出Gadg</description></item><item><title>Arthas学习</title><link>https://p1n93r.github.io/post/security/arthas%D1%A7%CF%B0/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/arthas%D1%A7%CF%B0/</guid><description>安装使用 （1）安装 1 2 curl -O https://arthas.aliyun.com/arthas-boot.jar java -jar arthas-boot.jar --telnet-port 9998 --http-port -1 （2）退出Arthas 直接运行 quit 或者 exit 命令。但是这不是退出 Arthas ，而是退出当前连接而已，下次还是可以继</description></item><item><title>MySQL_JDBC反序列化</title><link>https://p1n93r.github.io/post/security/mysql_jdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/mysql_jdbc%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>Gadget Chain 如下图所示，关键点是：ResultSetImpl#getObject()： POC # 8.0.11版本测试通过，8.0.22版本测试不通过 jdbc:mysql://xx.xx.xx.xx:3306/test?autoDeserialize=true&amp;amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;amp;user=root&amp;amp;password=123456&amp;amp;serverTimezone=GMT # 6</description></item><item><title>Ognl_SSTI总结</title><link>https://p1n93r.github.io/post/security/ognl_ssti%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/ognl_ssti%E6%80%BB%E7%BB%93/</guid><description>Ognl介绍 Ognl，即对象视图导航语言（Object Graphic Navigation Language）。 使用这种表达式语言可以通过某种表达式语法存取 java 对象的任意属性，</description></item><item><title>Pebble安全研究</title><link>https://p1n93r.github.io/post/security/pebble%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/pebble%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</guid><description>简介 Pebble是一款Java 模板引擎，开发他的灵感来自于Twig。它具有很强的模板延续性和易于阅读的语法；出于安全性考虑，它内置自动转义功</description></item><item><title>springboot_actuator漏洞分析</title><link>https://p1n93r.github.io/post/security/springboot_actuator%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/springboot_actuator%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid><description>简介 Spring-Actuator是Spring-boot对应用监控的集成模块,提供了我们对服务器进行监控的支持,使我们更直观的获取应用程序</description></item><item><title>Struts2历史漏洞分析</title><link>https://p1n93r.github.io/post/security/struts2%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/struts2%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid><description>Struts2基本了解 Struts2的数据处理架构图下所示： 一个简单的说明如下： 客户端初始化一个指向servlet容器的请求。 请求经过一系列</description></item><item><title>Thymeleaf安全研究</title><link>https://p1n93r.github.io/post/security/thymeleaf%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/thymeleaf%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</guid><description>简介 Thymeleaf 是一个类似Velocity、FreeMarker 的Java模板引擎，而且Spring Boot推荐使用Thymeleaf引擎。它支持 HTML 原</description></item><item><title>字节码插桩技术在内存马中的应用</title><link>https://p1n93r.github.io/post/security/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%86%85%E5%AD%98%E9%A9%AC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 15 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF%E5%9C%A8%E5%86%85%E5%AD%98%E9%A9%AC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>认识JavaAgent 在jdk的rt.jar包中存在一个 java.lang.instrument 包。 java Instrumentation 指的是可以用独立于应用程序之外的代理（agent）程序来监测和协助运行在J</description></item><item><title>vulnstack2笔记</title><link>https://p1n93r.github.io/post/security/vulnstack2%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 15 Jun 2021 00:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/vulnstack2%E7%AC%94%E8%AE%B0/</guid><description>主要知识点 绕杀毒软件； 使用TeamView绕过RDP登录限制； MS17-010； 还有本次打靶未体现的知识点，但是可以应用到本次靶场： MS14-068; 黄金票</description></item><item><title>Tomcat之Valve内存马</title><link>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bvalve%E5%86%85%E5%AD%98%E9%A9%AC/</link><pubDate>Wed, 02 Jun 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bvalve%E5%86%85%E5%AD%98%E9%A9%AC/</guid><description>前置知识 需要掌握《Tomcat架构原理》。 这一招是真的厉害，脑袋一拍，我咋没想到？直接在Pipeline-Valve内植入木马，简单粗暴，非</description></item><item><title>Tomcat之Servlet内存马</title><link>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bservlet%E5%86%85%E5%AD%98%E9%A9%AC/</link><pubDate>Wed, 02 Jun 2021 09:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bservlet%E5%86%85%E5%AD%98%E9%A9%AC/</guid><description>前置知识 Tomcat架构原理 Tomcat之Filter内存马 过程分析 前面文章中（Tomcat之Filter内存马），分析得到，我们可以通过S</description></item><item><title>Tomcat之Filter内存马</title><link>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bfilter%E5%86%85%E5%AD%98%E9%A9%AC/</link><pubDate>Tue, 01 Jun 2021 09:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/tomcat%E4%B9%8Bfilter%E5%86%85%E5%AD%98%E9%A9%AC/</guid><description>前置知识 阅读本篇文章前需要掌握《Tomcat架构原理》。 分析 根据《Tomcat架构原理》中提到：Wrapper容器的最后一个Valve会创建</description></item><item><title>Tomcat架构原理</title><link>https://p1n93r.github.io/post/java/tomcat%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 29 May 2021 10:21:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/tomcat%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</guid><description>Tomcat整体架构 Tomcat的启动流程如下： startup.sh -&amp;gt; catalina.sh start -&amp;gt; java -jar org.apache.catalina.startup.Bootstrap.main() Tomcat需要实现的2个核心功能： 处理socket连接，负责网络字节流与R</description></item><item><title>vulnstack1笔记</title><link>https://p1n93r.github.io/post/security/vulnstack1%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 26 May 2021 00:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/vulnstack1%E7%AC%94%E8%AE%B0/</guid><description>网络环境 模拟黑盒环境，所以只知道内网win7的公网ip，拓扑图如下图所示： 边界打点 首先需要拿下对外开放服务的win7，已知其公网ip为192</description></item><item><title>域控权限持久化</title><link>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96/</link><pubDate>Mon, 24 May 2021 17:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E6%9D%83%E9%99%90%E6%8C%81%E4%B9%85%E5%8C%96/</guid><description>DSRM域后门 DSRM（Directory Service Restore Model，目录服务恢复模式）是windows域环境中域控的安全模式启动选项。每个域控都有一个</description></item><item><title>第六章：域控制器安全</title><link>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%89%E5%85%A8/</link><pubDate>Sun, 23 May 2021 09:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%89%E5%85%A8/</guid><description>利用ntds.dit读取域内哈希 提取ntds.dit 主要分为以下几种方式提取： 在域控上使用ntdsutil的IFM提取，支持win2k03、</description></item><item><title>第五章：域内横向移动分析及防御</title><link>https://p1n93r.github.io/post/security/%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</link><pubDate>Sat, 22 May 2021 12:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</guid><description>IPC IPC的利用条件如下所示： 开启了139和445端口：IPC$需要139和445端口的支持。 管理员开启了默认共享：通过IPC$，可以实现对这</description></item><item><title>Shiro550反序列化分析</title><link>https://p1n93r.github.io/post/code_audit/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</link><pubDate>Sun, 14 Mar 2021 22:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/code_audit/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</guid><description>攻击链分析 debug得到整个攻击链的主要路径如下图所示： 代码分析主要从 AbstracRememberMeManager#getRemembe</description></item><item><title>JFinal Enjoy Template Engine命令执行绕过分析</title><link>https://p1n93r.github.io/post/code_audit/jfinal_enjoy_template_engine%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/</link><pubDate>Sun, 07 Mar 2021 22:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/code_audit/jfinal_enjoy_template_engine%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/</guid><description>分析 上周代码审计一个系统，发现系统是基于JFinal框架，是一个国产比较出名的框架（还挺好用），JFinal默认不支持直接访问jsp，系统使</description></item><item><title>第四章：权限提升分析及防御</title><link>https://p1n93r.github.io/post/security/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</link><pubDate>Sun, 07 Mar 2021 22:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E5%88%86%E6%9E%90%E5%8F%8A%E9%98%B2%E5%BE%A1/</guid><description>前言 在windows中，权限大概分为如下四种： User：普通用户权限，系统中最安全的权限。（分配给该组的默认权限不允许成员修改操作系统的设置</description></item><item><title>第三章：隐藏通信隧道技术</title><link>https://p1n93r.github.io/post/security/%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</link><pubDate>Sun, 07 Feb 2021 22:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</guid><description>基础知识 概述 下面所说的隧道，就是一种绕过端口屏蔽的通信方式，其实也就是使用不同协议的通信，以达到绕过防火墙的目的。常见的隧道如下： 网络层：I</description></item><item><title>Java安全</title><link>https://p1n93r.github.io/post/code_audit/java%E5%AE%89%E5%85%A8/</link><pubDate>Tue, 02 Feb 2021 17:52:36 +0800</pubDate><guid>https://p1n93r.github.io/post/code_audit/java%E5%AE%89%E5%85%A8/</guid><description>Java反射 Java安全中最火的不过反序列化漏洞，而反序列化漏洞离不开反射。通过反射可以为Java附加上动态特性。 Java中获取java.l</description></item><item><title>第二章：内网信息收集</title><link>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</link><pubDate>Sat, 23 Jan 2021 16:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</guid><description>概述 当进入内网后，面对的是一片黑暗森林。我们需要对当前网络环境进行判断，涉及如下几个方面： 我是谁：对当前机器角色的判断。 这是哪：对当前机器所</description></item><item><title>第一章：内网渗透基础</title><link>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 19 Jan 2021 22:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</guid><description>工作组 将不同的计算机按功能或部门分别列入不同的 工作组 ，以方便管理。 默认所有计算机都处在名为 WORKGROUP 的工作组中。 工作组资源管理模式适合于网络中计算机</description></item><item><title>XXE利用</title><link>https://p1n93r.github.io/post/security/xxe%E5%88%A9%E7%94%A8/</link><pubDate>Sun, 17 Jan 2021 12:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/xxe%E5%88%A9%E7%94%A8/</guid><description>有回显XXE 引用外部实体 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ELEMENT foo ANY &amp;gt; &amp;lt;!ENTITY s1 SYSTEM &amp;quot;file:///etc/passwd&amp;quot; &amp;gt; ]&amp;gt; &amp;lt;foo&amp;gt;&amp;amp;s1;&amp;lt;/foo&amp;gt; 引用公共实体 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt; &amp;lt;!DOCTYPE root PUBLIC &amp;quot;test&amp;quot; &amp;quot;file:///etc/passwd&amp;quot;&amp;gt; &amp;lt;root&amp;gt;&amp;amp;test;&amp;lt;/root&amp;gt; 引用参数实体 当文件含有特殊符号的时候，如&amp;amp</description></item><item><title>代码审计思路</title><link>https://p1n93r.github.io/post/code_audit/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%9D%E8%B7%AF/</link><pubDate>Sat, 16 Jan 2021 12:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/code_audit/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%9D%E8%B7%AF/</guid><description>审计方式 以下描述均基于人工审计（Java代码审计） 底层逆向跟踪：从底层根据敏感函数、敏感关键字回溯到最外层的参数入口，如果整个调用链没有防护</description></item><item><title>Java注解</title><link>https://p1n93r.github.io/post/java/java%E6%B3%A8%E8%A7%A3/</link><pubDate>Fri, 01 Jan 2021 21:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/java%E6%B3%A8%E8%A7%A3/</guid><description>元注解 元注解的作用就是 注解其他注解 ，Java5.0定义了以下4个标准元注解，它们被用来对其他注解类型作说明： @Target @Retention @Documented @Inherited @Target @Target说明了注</description></item><item><title>渗透笔记</title><link>https://p1n93r.github.io/post/security/%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 01 Jan 2021 21:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</guid><description>获取shell后 开启清屏： export TERM=screen # 赋值xterm也可以 查看sudo权限： sudo -l 尝试生成公钥文件到用户目录下的 .ssh 下： echo &amp;quot;xxxx&amp;quot; &amp;gt; /home/p1n93r/.ssh/authorized_keys ，然后就可以免密ssh</description></item><item><title>sqli_labs通关</title><link>https://p1n93r.github.io/post/security/sqli-labs%E9%80%9A%E5%85%B3/</link><pubDate>Sat, 28 Nov 2020 20:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/sqli-labs%E9%80%9A%E5%85%B3/</guid><description>前置知识 常用函数 version()：mysql版本； user()：当前数据库链接用户名； database()：当前链接数据库名； @@data</description></item><item><title>upload_labs通关</title><link>https://p1n93r.github.io/post/security/upload_labs%E9%80%9A%E5%85%B3/</link><pubDate>Sun, 08 Nov 2020 13:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/upload_labs%E9%80%9A%E5%85%B3/</guid><description>第一关 源码 function checkFile() { var file = document.getElementsByName('upload_file')[0].value; if (file == null || file == &amp;quot;&amp;quot;) { alert(&amp;quot;请选择要上传的文件!&amp;quot;); return false; } //定义允许上传的文件类型 var allow_ext =</description></item><item><title>低于1.5.0版本shiro身份绕过漏洞分析</title><link>https://p1n93r.github.io/post/security/%E4%BD%8E%E4%BA%8E1.5.0%E7%89%88%E6%9C%ACshiro%E8%BA%AB%E4%BB%BD%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link><pubDate>Fri, 06 Nov 2020 18:35:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/%E4%BD%8E%E4%BA%8E1.5.0%E7%89%88%E6%9C%ACshiro%E8%BA%AB%E4%BB%BD%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid><description>测试环境 shiro 1.4.0 springboot shiro过滤器配置如下： @Bean public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier(&amp;quot;defaultWebSecurityManager&amp;quot;) DefaultWebSecurityManager defaultWebSecurityManager) { ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean(); //设置安全管理器 shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager); //设置未认证(登录)时，访问需要认证的资源时跳转的页面</description></item><item><title>CewlKid: 1</title><link>https://p1n93r.github.io/post/security/cewlkid/</link><pubDate>Wed, 23 Sep 2020 19:51:36 +0800</pubDate><guid>https://p1n93r.github.io/post/security/cewlkid/</guid><description>介绍 An intermediate boot2root. The name is a hint. The start is CTF but the end is real world and worth the effort. Created in Virtualbox. Goal: Get the root flag. 地址：CewlKid: 1 virtualbox网络设置 首先需要保证攻击机和靶子</description></item><item><title>LeetCode数据库(第二天)</title><link>https://p1n93r.github.io/post/sql/leetcode%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E5%A4%A9/</link><pubDate>Wed, 16 Sep 2020 23:06:36 +0800</pubDate><guid>https://p1n93r.github.io/post/sql/leetcode%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%AC%E4%BA%8C%E5%A4%A9/</guid><description>[178]分数排名 题目内容如下： //编写一个 SQL 查询来实现分数排名。 // // 如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一</description></item><item><title>LeetCode算法(第一天)</title><link>https://p1n93r.github.io/post/data_tructure/leetcode%E7%AE%97%E6%B3%95%E7%AC%AC%E4%B8%80%E5%A4%A9/</link><pubDate>Tue, 15 Sep 2020 18:57:36 +0800</pubDate><guid>https://p1n93r.github.io/post/data_tructure/leetcode%E7%AE%97%E6%B3%95%E7%AC%AC%E4%B8%80%E5%A4%A9/</guid><description>两数之和 题目描述如下： //给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 // // 你</description></item><item><title>排序</title><link>https://p1n93r.github.io/post/data_tructure/%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 14 Sep 2020 13:38:36 +0800</pubDate><guid>https://p1n93r.github.io/post/data_tructure/%E6%8E%92%E5%BA%8F/</guid><description>初级排序算法 约定 首先约一些辅助函数，代码如下： /** * 交换元素 */ private static void exchange(Comparable[] a,int i,int t){ Comparable temp = a[i]; a[i]=a[t]; a[t]=temp; } /** * 比较元素:前一个元素是否比后一个元素小 */ private static boolean less(Comparable</description></item><item><title>SpringBoot操作Redis</title><link>https://p1n93r.github.io/post/spring/springboot%E6%93%8D%E4%BD%9Credis/</link><pubDate>Tue, 08 Sep 2020 17:50:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/springboot%E6%93%8D%E4%BD%9Credis/</guid><description>Redis介绍 Redis是一个开源的、高性能key-value数据结构存储，可以用来作为 数据库、缓存和消息队列。 以下是Redis的特点： Re</description></item><item><title>Lambda表达式</title><link>https://p1n93r.github.io/post/java/lambda/</link><pubDate>Sat, 05 Sep 2020 10:34:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/lambda/</guid><description>Lambda介绍 Lambda可以简单的理解为可以传递的匿名函数的一种方式，它没有名称，但是有参数列表、函数主体、返回类型以及可以抛出的异常列</description></item><item><title>Mybatis类型转换器和别名</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%92%8C%E5%88%AB%E5%90%8D/</link><pubDate>Fri, 04 Sep 2020 10:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%92%8C%E5%88%AB%E5%90%8D/</guid><description>注意 mybatis不同版本可能有区别。 本次测试基于mybatis-spring-boot-starter，所以配置方式和spring整合my</description></item><item><title>Spring访问数据库</title><link>https://p1n93r.github.io/post/spring/spring%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Thu, 03 Sep 2020 08:13:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/spring%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>SpringBoot整合Mybatis和Druid 引入依赖 &amp;lt;!--mybatis--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--druid数据库连接池--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.22&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;</description></item><item><title>观察者模式</title><link>https://p1n93r.github.io/post/design_patterns/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 02 Sep 2020 21:37:36 +0800</pubDate><guid>https://p1n93r.github.io/post/design_patterns/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>原理 思想：当对象间存在一对多关系时，可以使用观察者模式。当一个对象被修改时，会自动通知依赖它的对象。 如何使用：一个对象（被观察者）的状态发生</description></item><item><title>Spring AOP</title><link>https://p1n93r.github.io/post/spring/spring-aop/</link><pubDate>Wed, 02 Sep 2020 14:40:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/spring-aop/</guid><description>Spring AOP术语和流程 Spring AOP是一种基于方法的AOP，它只能应用于方法上。 AOP的术语如下： 连接点（join point）：对应的是具体被拦截的对</description></item><item><title>全注解下的Spring IoC</title><link>https://p1n93r.github.io/post/spring/%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84spring-ioc/</link><pubDate>Mon, 31 Aug 2020 16:00:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/%E5%85%A8%E6%B3%A8%E8%A7%A3%E4%B8%8B%E7%9A%84spring-ioc/</guid><description>IoC容器简介 IoC容器需要具备两个基本功能： 通过描述管理Bean，包括发布和获取Bean。 通过描述完成Bean之间的依赖关系。 一些Spri</description></item><item><title>策略者模式</title><link>https://p1n93r.github.io/post/design_patterns/%E7%AD%96%E7%95%A5%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 30 Aug 2020 22:47:36 +0800</pubDate><guid>https://p1n93r.github.io/post/design_patterns/%E7%AD%96%E7%95%A5%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>原理 在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context/service 对象。策略对象改变 context/service 对象的执行算法。 具体案例 项目结构如下： A</description></item><item><title>mpvue学习笔记</title><link>https://p1n93r.github.io/post/vue/mpvue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 27 Jul 2020 19:51:36 +0800</pubDate><guid>https://p1n93r.github.io/post/vue/mpvue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>介绍 mpvue是美团开源的一个用于开发小程序的框架，在用法上和vue高度一致。 环境 node.js：运行在服务端的 JavaScript。 vue</description></item><item><title>Mysql四大隔离级别</title><link>https://p1n93r.github.io/post/interview/mysql%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Thu, 25 Jun 2020 16:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/interview/mysql%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>事务 什么是事务 事务是由一个有限的数据库操作序列构成，这些操作要么全部执行，要么全部不执行。是一个不可分割的工作单位。 事务的四大特性 原子性(A</description></item><item><title>Mysql</title><link>https://p1n93r.github.io/post/interview/mysql/</link><pubDate>Thu, 11 Jun 2020 16:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/interview/mysql/</guid><description>如何设计一个关系型数据库？ 存储部分：类似文件系统将数据持久化到硬盘上。 程序实例部分，创建模块：存储管理、缓存机制、SQL解析、日志管理、权限</description></item><item><title>Spring</title><link>https://p1n93r.github.io/post/interview/spring/</link><pubDate>Thu, 11 Jun 2020 16:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/interview/spring/</guid><description>什么是Spring的IOC？ IOC（Inversion of Controller）即 控制反转 。反转获得依赖对象的过程，获得依赖对象的过程由自身管</description></item><item><title>异常、IO和NIO(Java)</title><link>https://p1n93r.github.io/post/interview/%E5%BC%82%E5%B8%B8/</link><pubDate>Thu, 11 Jun 2020 16:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/interview/%E5%BC%82%E5%B8%B8/</guid><description>Java异常面试题 Java中异常分为哪两种？ 编译时异常和运行时异常。 异常的处理机制有哪几种？ 异常捕捉：try&amp;hellip;catch&amp;he</description></item><item><title>注解、集合和泛型(Java)</title><link>https://p1n93r.github.io/post/interview/%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88%E5%92%8C%E6%B3%9B%E5%9E%8Bjava/</link><pubDate>Wed, 10 Jun 2020 16:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/interview/%E6%B3%A8%E8%A7%A3%E9%9B%86%E5%90%88%E5%92%8C%E6%B3%9B%E5%9E%8Bjava/</guid><description>Java注解面试题 注解是什么？ Annotation(注解)是Java提供的一种 对元程序中元素关联信息和元数据(metaData)的途径和方法</description></item><item><title>Java容器</title><link>https://p1n93r.github.io/post/java/java%E5%AE%B9%E5%99%A8/</link><pubDate>Tue, 12 May 2020 10:21:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/java%E5%AE%B9%E5%99%A8/</guid><description>概览 Java容器主要包括Collection和Map两种，Collection存储对象集合，而Map存储键值对（两个对象）的映射表。 Collection Set Tr</description></item><item><title>支付宝easySDK的使用</title><link>https://p1n93r.github.io/post/other/%E6%94%AF%E4%BB%98%E5%AE%9Deasysdk%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 11 May 2020 08:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/%E6%94%AF%E4%BB%98%E5%AE%9Deasysdk%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>前言 需要知道的是，alipayEasySDK支持alipaySDK所支持的所有功能，而且alipayEasySDK提供了很多精简后的api（</description></item><item><title>SpringMVC优雅的去除参数的前后空格</title><link>https://p1n93r.github.io/post/springmvc/springmvc%E4%BC%98%E9%9B%85%E7%9A%84%E5%8E%BB%E9%99%A4%E5%8F%82%E6%95%B0%E5%89%8D%E5%90%8E%E7%A9%BA%E6%A0%BC/</link><pubDate>Wed, 15 Apr 2020 00:38:36 +0800</pubDate><guid>https://p1n93r.github.io/post/springmvc/springmvc%E4%BC%98%E9%9B%85%E7%9A%84%E5%8E%BB%E9%99%A4%E5%8F%82%E6%95%B0%E5%89%8D%E5%90%8E%E7%A9%BA%E6%A0%BC/</guid><description>需要解决的问题 SpringMVC利用参数绑定接收的前端的参数，需要去除参数的前后空格。 SpringMVC利用@RequestBody接收的J</description></item><item><title>树</title><link>https://p1n93r.github.io/post/data_tructure/%E6%A0%91/</link><pubDate>Sat, 21 Mar 2020 10:57:36 +0800</pubDate><guid>https://p1n93r.github.io/post/data_tructure/%E6%A0%91/</guid><description>什么是树 树是一种类似于链表的数据结构，不过链表的节点是以线性方式简单的指向其后继节点，而树的一个节点可以指向许多个节点。树是一种典型的 非线性</description></item><item><title>Git的使用</title><link>https://p1n93r.github.io/post/other/git%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 15 Mar 2020 20:07:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/git%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>初步使用 在windows下直接在官网下载安装程序，然后安装即可（记得勾选安装git bash）使用git。安装完毕后需要设置本机的git的用户</description></item><item><title>IDEA之Maven疑难杂症</title><link>https://p1n93r.github.io/post/other/idea%E4%B9%8Bmaven%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</link><pubDate>Mon, 09 Mar 2020 19:29:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/idea%E4%B9%8Bmaven%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</guid><description>待解决的问题 IDEA的Maven项目从模板构建卡住的问题。 Maven下载依赖包提示SSL错误的问题。 Maven下载依赖包速度慢的问题。 优化步</description></item><item><title>链表</title><link>https://p1n93r.github.io/post/data_tructure/%E9%93%BE%E8%A1%A8/</link><pubDate>Mon, 02 Mar 2020 22:29:36 +0800</pubDate><guid>https://p1n93r.github.io/post/data_tructure/%E9%93%BE%E8%A1%A8/</guid><description>什么是链表 链表是一种用于存储数据集合的数据结构。链表有以下属性： 相邻元素之间通过指针连接。 最后一个元素的后继指针值为null。 在程序执行过程</description></item><item><title>稀疏数组和队列</title><link>https://p1n93r.github.io/post/data_tructure/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E5%92%8C%E9%98%9F%E5%88%97/</link><pubDate>Fri, 07 Feb 2020 14:38:36 +0800</pubDate><guid>https://p1n93r.github.io/post/data_tructure/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E5%92%8C%E9%98%9F%E5%88%97/</guid><description>稀疏数组(sparse array) 应用场景 存在很多没有意义的相同的数据需要记录时，可以使用稀疏数组。例如一个数组中大部分元素都是0，或者是其他的相同的</description></item><item><title>J2EE开发技巧之字符编码过滤器</title><link>https://p1n93r.github.io/post/other/j2ee%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E5%8F%AA%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Tue, 10 Dec 2019 11:04:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/j2ee%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E5%8F%AA%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>前言 j2ee开发过程中，经常会遇到编码问题，比如从前台传到后台的数据如果是中文的话，后台接收到的却是乱码；后台返回给前台的数据是中文，前台显</description></item><item><title>7-使用过滤器操作文本文件</title><link>https://p1n93r.github.io/post/linux/7-%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E6%93%8D%E4%BD%9C%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</link><pubDate>Thu, 05 Dec 2019 20:27:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/7-%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E6%93%8D%E4%BD%9C%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6/</guid><description>计算文件中的单词数、行数和字符数 可以使用 wc 命令对文件中的单词数、行数、字符数进行统计，默认使用 wc 会三个数据都显示（顺序为：行数、单词数、字节</description></item><item><title>Android自定义layout实现侧滑</title><link>https://p1n93r.github.io/post/android/android%E8%87%AA%E5%AE%9A%E4%B9%89layout%E5%AE%9E%E7%8E%B0%E4%BE%A7%E6%BB%91/</link><pubDate>Wed, 04 Dec 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/android/android%E8%87%AA%E5%AE%9A%E4%B9%89layout%E5%AE%9E%E7%8E%B0%E4%BE%A7%E6%BB%91/</guid><description>开发思路 看到如下的图解，主要思路就是要设计一个布局，分为两个部分，一个是左侧的沾满屏幕宽度的显示主内容的橙色框框，一个是被挤到屏幕外看不见的</description></item><item><title>J2EE开发技巧之相对路径</title><link>https://p1n93r.github.io/post/other/j2ee%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E4%B9%8B%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/</link><pubDate>Tue, 03 Dec 2019 11:27:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/j2ee%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E4%B9%8B%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/</guid><description>前言 在进行WEB开发时，如果一个项目比较大，分了很多的模块，那么必定项目的url也很多，如果url没有统一的规范，极易容易造成混乱，本文就是</description></item><item><title>6-查看文件</title><link>https://p1n93r.github.io/post/linux/6-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 26 Nov 2019 19:27:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/6-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6/</guid><description>了解文件的类型 使用命令 file 可以查看文件的类型。一个例子如下： 在标准输出设备上查看文件 使用命令 cat 可以将文本文件的内容显示在屏幕上（DOS是 type ），</description></item><item><title>5-组合命令</title><link>https://p1n93r.github.io/post/linux/5-%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 25 Nov 2019 20:40:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/5-%E7%BB%84%E5%90%88%E5%91%BD%E4%BB%A4/</guid><description>连续运行多个命令 可以使用符号 ; 分隔多个连续运行的命令。例如下面： Notice ：使用此种方式连续运行多个命令的时候，需要特别小心—— 即使前面的命令运行失</description></item><item><title>Spring Bean</title><link>https://p1n93r.github.io/post/spring/spring-bean/</link><pubDate>Wed, 20 Nov 2019 17:16:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/spring-bean/</guid><description>Bean的配置 Spring是一个生产和管理其容器内的Bean的工厂，如果要使用这个工厂来生产和管理Bean，需要在Spring的配置文件中配</description></item><item><title>4-学习命令</title><link>https://p1n93r.github.io/post/linux/4-%E5%AD%A6%E4%B9%A0%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 20 Nov 2019 12:09:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/4-%E5%AD%A6%E4%B9%A0%E5%91%BD%E4%BB%A4/</guid><description>使用man查找命令相关信息 想要查看某个命令的详细用法，可以使用 man 命令，格式为： man 待查询命令 ,就会打开此命令的手册页面，是基于 less 打开的，所以可</description></item><item><title>3-创建和销毁</title><link>https://p1n93r.github.io/post/linux/3-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81/</link><pubDate>Sat, 16 Nov 2019 18:02:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/3-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81/</guid><description>将文件改为当前时间 touch 命令的主要作用是更新文件的 访问和修改时间 （需要拥有文件的写入权限），如果指向修改文件的访问时间，可以使用 -a 选项；如果只想</description></item><item><title>2-文件导航系统</title><link>https://p1n93r.github.io/post/linux/2-%E6%96%87%E4%BB%B6%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 15 Nov 2019 19:05:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/2-%E6%96%87%E4%BB%B6%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F/</guid><description>列出文件和文件夹 在操作和使用目录中的文件之前，首先得直到该目录中有哪些文件，所以我们需要列出目录中得文件和子目录，此命令便是 ls 。输入 ls 会列出</description></item><item><title>1-需要了解的命令行相关事项</title><link>https://p1n93r.github.io/post/linux/1-%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9B%B8%E5%85%B3%E4%BA%8B%E9%A1%B9/</link><pubDate>Wed, 13 Nov 2019 21:36:36 +0800</pubDate><guid>https://p1n93r.github.io/post/linux/1-%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9B%B8%E5%85%B3%E4%BA%8B%E9%A1%B9/</guid><description>一切皆文件 在Linux系统中，一切皆文件 。除了我们常识中认识的文件外， 目录也是文件，不过是特殊类型的文件，包含有关其他文件的信息。磁盘驱动器</description></item><item><title>IO</title><link>https://p1n93r.github.io/post/java/io/</link><pubDate>Wed, 13 Nov 2019 19:22:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/io/</guid><description>概述 java的IO通过java.io包下的类和接口来支持，在java.io包下主要包括输入、输出两种IO流，每种输出输出流又可以分为 字节流和</description></item><item><title>Spring IoC</title><link>https://p1n93r.github.io/post/spring/spring-ioc/</link><pubDate>Tue, 12 Nov 2019 09:00:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/spring-ioc/</guid><description>Spring IoC基本概念 控制反转（IoC，Inversion of Control） 是Spring框架的基础，也是Spring的核心理念，用于消减计算机程</description></item><item><title>Spring入门</title><link>https://p1n93r.github.io/post/spring/spring%E5%85%A5%E9%97%A8/</link><pubDate>Tue, 05 Nov 2019 08:28:36 +0800</pubDate><guid>https://p1n93r.github.io/post/spring/spring%E5%85%A5%E9%97%A8/</guid><description>Spring简介 Spring是一个轻量级的Java开发框架， 目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。 Spring体系结</description></item><item><title>泛型</title><link>https://p1n93r.github.io/post/java/%E6%B3%9B%E5%9E%8B/</link><pubDate>Fri, 01 Nov 2019 19:33:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/%E6%B3%9B%E5%9E%8B/</guid><description>前言 Java中的泛型支持是从JDK1.5开始的，目的是 让集合能够记住其元素的数据类型 。在没有泛型之前，将元素放在集合中，此元素会被当成Obj</description></item><item><title>Mybatis传参</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E4%BC%A0%E5%8F%82/</link><pubDate>Sat, 26 Oct 2019 20:40:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E4%BC%A0%E5%8F%82/</guid><description>前言 有一次用到mybatis的动态sql中的foreach，发现foreach的属性collection填写的值有点问题。然后突然想到之前都</description></item><item><title>Mybatis缓存</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E7%BC%93%E5%AD%98/</link><pubDate>Sat, 26 Oct 2019 16:24:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E7%BC%93%E5%AD%98/</guid><description>概述 Mybatis主要有一级缓存和二级缓存，mybatis默认开启一级缓存，需要手动开启二级缓存。两者特性如下： 一级缓存：是相对于同一个Sq</description></item><item><title>Mybatis懒加载</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E6%87%92%E5%8A%A0%E8%BD%BD/</link><pubDate>Sat, 26 Oct 2019 13:09:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E6%87%92%E5%8A%A0%E8%BD%BD/</guid><description>前言 Mybatis的懒加载就是所谓的延迟加载，很多博客上也称之为按需加载，但是我觉得只有当配置了Mybatis的非侵略性懒加载才能称之为按需</description></item><item><title>集合</title><link>https://p1n93r.github.io/post/java/%E9%9B%86%E5%90%88/</link><pubDate>Fri, 18 Oct 2019 19:50:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/%E9%9B%86%E5%90%88/</guid><description>概述 集合类也被称为 容器 ，所有的集合都位于java.util包下。 集合类家族主要由Collection和Map接口派生出。 集合相比数组的优势是</description></item><item><title>高效创建ip代理池</title><link>https://p1n93r.github.io/post/other/%E9%AB%98%E6%95%88%E5%88%9B%E5%BB%BAip%E4%BB%A3%E7%90%86%E6%B1%A0/</link><pubDate>Fri, 04 Oct 2019 14:09:36 +0800</pubDate><guid>https://p1n93r.github.io/post/other/%E9%AB%98%E6%95%88%E5%88%9B%E5%BB%BAip%E4%BB%A3%E7%90%86%E6%B1%A0/</guid><description>前言 这次自动化软件测试课设过程中，弄着弄着ip就被ban了，于是想到挂代理，然后就想自己创建一个ip代理池，最后在github上发现了一个开</description></item><item><title>面向对象(二)</title><link>https://p1n93r.github.io/post/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%8C/</link><pubDate>Tue, 01 Oct 2019 21:31:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BA%8C/</guid><description>包装类 基本数据类型不具备“对象”的特性，它没有属性，没有方法。为了解决这个问题。Java提供了包装类为8种基本数据类型的分别定义了相应的引用</description></item><item><title>Android解析XML的四种方式</title><link>https://p1n93r.github.io/post/android/android%E8%A7%A3%E6%9E%90xml%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 26 Sep 2019 20:14:36 +0800</pubDate><guid>https://p1n93r.github.io/post/android/android%E8%A7%A3%E6%9E%90xml%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid><description>DOM方式解析XML DOM方式解析XML是将XML先全部加载到内存当中，所以 适用于较小的XML文件，可随机访问，可读可写 。DOM方式解析逻辑</description></item><item><title>面向对象(一)</title><link>https://p1n93r.github.io/post/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%80/</link><pubDate>Wed, 25 Sep 2019 10:31:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%80/</guid><description>概述 面向对象三大特征： 封装，继承，多态 类可以被认为是一种自定义的数据类型，可以使用类来定义变量，所有使用类定义的变量都是 引用变量 ，他们将会引</description></item><item><title>Mybatis动态SQL</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E5%8A%A8%E6%80%81sql/</link><pubDate>Tue, 24 Sep 2019 08:22:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E5%8A%A8%E6%80%81sql/</guid><description>前言 Mybatis可以提供动态组装SQL语句的功能，称为动态SQL。 一个综合例子 这个例子缺少&amp;lt;set&amp;gt;元素，&amp;lt;foreac</description></item><item><title>Mybatis级联查询</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E7%BA%A7%E8%81%94%E6%9F%A5%E8%AF%A2/</link><pubDate>Tue, 17 Sep 2019 11:19:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E7%BA%A7%E8%81%94%E6%9F%A5%E8%AF%A2/</guid><description>模拟需求 一对一关系：一个学生（Student）有一个地址（Address），一个地址只能被一个学生拥有。 一对多关系：一个学生可以有多个订单（</description></item><item><title>流程控制与数组</title><link>https://p1n93r.github.io/post/java/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84/</link><pubDate>Sun, 15 Sep 2019 23:31:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%95%B0%E7%BB%84/</guid><description>分支结构 if条件语句 if,else if,else后的代码块只有一条语句时（可以是空语句），可以省略花括号。 使用if,else时一定要先考虑小的范围。 sw</description></item><item><title>数据类型和运算符</title><link>https://p1n93r.github.io/post/java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link><pubDate>Wed, 04 Sep 2019 22:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/java/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid><description>注释 单行注释：使用//即可 多行注释：使用/*注释内容*/即可 文档注释：以/**开始，以*/结束 标识符和关键字 允许一行书写多个语句，每个语句之</description></item><item><title>Android知识点x0</title><link>https://p1n93r.github.io/post/android/android%E7%9F%A5%E8%AF%86%E7%82%B9x0/</link><pubDate>Wed, 04 Sep 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/android/android%E7%9F%A5%E8%AF%86%E7%82%B9x0/</guid><description>简述Android的技术架构？ 安卓平台采用了软件堆栈（软件叠层）的架构 。主要分为以下4部分： 底层：以Linux内核为基础，并包含各种驱动，只</description></item><item><title>SpringMVC之注解开发</title><link>https://p1n93r.github.io/post/springmvc/springmvc%E4%B9%8B%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</link><pubDate>Sat, 27 Jul 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/springmvc/springmvc%E4%B9%8B%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</guid><description>前言 之前的一篇博文：SpringMVC之处理器映射器中最后的注解式处理器映射器讲了如何使用最基础的注解开发，现在下面将讨论注解开发中的一些常</description></item><item><title>SpringMVC之Hello World</title><link>https://p1n93r.github.io/post/springmvc/springmvc%D6%AEhello_world/</link><pubDate>Thu, 25 Jul 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/springmvc/springmvc%D6%AEhello_world/</guid><description>开发环境 IDEA下的Maven项目 JDK 1.8_0211 Tomcat 8.5.38 项目依赖 为了方便以后的学习，我直接加入了SSM项目的所有依赖，从而包括Spring和Mybatis</description></item><item><title>SpringMVC之处理器映射器</title><link>https://p1n93r.github.io/post/springmvc/springmvc%E4%B9%8B%E6%8E%A7%E5%88%B6%E5%99%A8%E6%98%A0%E5%B0%84%E5%99%A8/</link><pubDate>Thu, 25 Jul 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/springmvc/springmvc%E4%B9%8B%E6%8E%A7%E5%88%B6%E5%99%A8%E6%98%A0%E5%B0%84%E5%99%A8/</guid><description>前言 此处只是对SpringMVC常见的三个控制器映射器做探讨，没有深入研究其源码实现，只是探讨其使用方法。以下探究的环境都是基于我的之前写过</description></item><item><title>SpringMVC架构</title><link>https://p1n93r.github.io/post/springmvc/springmvc%E5%85%A5%E9%97%A8/</link><pubDate>Tue, 23 Jul 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/springmvc/springmvc%E5%85%A5%E9%97%A8/</guid><description>介绍 SpringMVC是Spring Framework的一个模块。 Spring和SpringMVC无需中间整合层。 SpringMVC是一个基</description></item><item><title>Android页面布局</title><link>https://p1n93r.github.io/post/android/android%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80/</link><pubDate>Thu, 11 Jul 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/android/android%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80/</guid><description>介绍 安卓提供6中基本布局类：帧布局（FrameLayout），线性布局（LinearLayout），相对布局（RelativeLayout）</description></item><item><title>Mybatis整合Spring</title><link>https://p1n93r.github.io/post/mybatis/mybatis%E6%95%B4%E5%90%88spring/</link><pubDate>Wed, 10 Jul 2019 17:48:36 +0800</pubDate><guid>https://p1n93r.github.io/post/mybatis/mybatis%E6%95%B4%E5%90%88spring/</guid><description>介绍 Mybatis是一款持久层的框架，使用Mybatis我们无需自己编写繁琐的JDBC代码，也无需为sql注入等安全问题烦恼。没用过Hibe</description></item></channel></rss>